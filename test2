# coding=utf-8
"""===========================================================================
DESCRIPTION:  Generated for GEN_EMPLOYEE

AUTHOR:       Generated by DA AutoGen (PIMCO\johntran)

DATE:         Mar 19 2018  1:22PM

!!! DO NOT MODIFY THIS FILE !!! 

To override/extend the class in this file, you'll have to do the following:
   * Create a folder called 'overrides'
   * Create a file with the same name as this file
   * The new file should contain a class with the same name as the of the class you want to override/extend
===========================================================================
"""

from __future__ import unicode_literals
from django.db import models as md
from core.helpers import OverridableBase


class ModelFieldHelper(OverridableBase):
    editable_fields = ['id', 'mgr_employee_id', 'dept_id', 'employee_id_number', 'name', 'dob', 'email', 'phone', 'note', 'start_date']
    foreign_fields = ['mgr_employee_id', 'dept_id']
    indexed_fields = ['id', 'mgr_employee_id', 'employee_id_number', 'email', 'phone']
    list_display_fields = ['id', 'mgr_employee_id', 'dept_id', 'employee_id_number', 'name', 'dob', 'email', 'phone', 'note', 'start_date']
    readonly_fields = ['id', 'row_insert_by', 'row_insert_date', 'row_update_by', 'row_update_date']

    def id(self):
        return md.AutoField(verbose_name=u'Id', db_column='ID', db_index=True, primary_key=True, help_text='', editable=False)

    def mgr_employee_id(self):
        if not self.foreign_fields.__contains__('mgr_employee_id'):
            self.foreign_fields.append('mgr_employee_id')
        return md.ForeignKey(verbose_name=u'Mgr Employee Id', db_column='MGR_EMPLOYEE_ID', to='GenEmployee', to_field='id', related_name='%(app_label)s_GenEmployee_mgr_employee_id', on_delete=md.PROTECT, limit_choices_to={}, db_index=True, null=True, blank=True, help_text='', editable=True)

        # if self.foreign_fields.__contains__('mgr_employee_id'):
        #     self.foreign_fields.remove('mgr_employee_id')
        # return md.IntegerField(verbose_name=u'Mgr Employee Id', db_column='MGR_EMPLOYEE_ID', db_index=True, null=True, blank=True, help_text='', editable=True)

    def dept_id(self):
        if not self.foreign_fields.__contains__('dept_id'):
            self.foreign_fields.append('dept_id')
        return md.ForeignKey(verbose_name=u'Dept Id', db_column='DEPT_ID', to='GenDept', to_field='id', related_name='%(app_label)s_GenEmployee_dept_id', on_delete=md.PROTECT, limit_choices_to={}, help_text='', editable=True)

        # if self.foreign_fields.__contains__('dept_id'):
        #     self.foreign_fields.remove('dept_id')
        # return md.IntegerField(verbose_name=u'Dept Id', db_column='DEPT_ID', help_text='', editable=True)

    def employee_id_number(self):
        return md.IntegerField(verbose_name=u'Employee Id Number', db_column='EMPLOYEE_ID_NUMBER', db_index=True, unique=True, help_text='', editable=True)

    def name(self):
        return md.CharField(verbose_name=u'Name', db_column='NAME', max_length=200, help_text='', editable=True)

    def dob(self):
        return md.DateField(verbose_name=u'Dob', db_column='DOB', null=True, blank=True, help_text='', editable=True)

    def email(self):
        return md.EmailField(verbose_name=u'Email', db_column='EMAIL', db_index=True, null=True, blank=True, max_length=254, help_text='', editable=True)

    def phone(self):
        return md.CharField(verbose_name=u'Phone', db_column='PHONE', db_index=True, null=True, blank=True, max_length=50, help_text='', editable=True)

    def note(self):
        return md.TextField(verbose_name=u'Note', db_column='NOTE', null=True, blank=True, max_length=400, help_text='', editable=True)

    def start_date(self):
        return md.DateTimeField(verbose_name=u'Start Date', db_column='START_DATE', null=True, blank=True, help_text='', editable=True)

    def row_insert_by(self):
        return md.CharField(verbose_name=u'Row Insert By', db_column='ROW_INSERT_BY', max_length=50, help_text='', editable=False)

    def row_insert_date(self):
        return md.DateTimeField(verbose_name=u'Row Insert Date', db_column='ROW_INSERT_DATE', auto_now_add=True, help_text='', editable=False)

    def row_update_by(self):
        return md.CharField(verbose_name=u'Row Update By', db_column='ROW_UPDATE_BY', max_length=50, help_text='', editable=False)

    def row_update_date(self):
        return md.DateTimeField(verbose_name=u'Row Update Date', db_column='ROW_UPDATE_DATE', auto_now=True, help_text='', editable=False)

