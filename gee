# coding=utf-8
"""===========================================================================
DESCRIPTION:  Generated for GEN_EMPLOYEE

AUTHOR:       Generated by DA AutoGen (PIMCO\johntran)

DATE:         Mar 19 2018  1:22PM

!!! DO NOT MODIFY THIS FILE !!! 

To override/extend the class in this file, you'll have to do the following:
   * Create a folder called 'overrides'
   * Create a file with the same name as this file
   * The new file should contain a class with the same name as the of the class you want to override/extend
===========================================================================
"""

from __future__ import unicode_literals
from django.contrib import admin

from core.django.admin.filters import *
from admin_view_model_base import AdminViewModelBase
from ...models.gen_employee import GenEmployee as Model
from ...models.helpers.gen_employee import ModelFieldHelper
from inlines.gen_employee import InlineHelper
from django.utils.translation import ugettext_lazy as _




# class MultiselectFieldListFilter(AllValuesFieldListFilter):
#     def __init__(self, field, request, params, model, model_admin, field_path):
#         super(MultiselectFieldListFilter, self).__init__(
#             field, request, params, model, model_admin, field_path)
#
#         self.lookup_choices = (ModelFieldHelper.list_display_fields)
#
#
#     def expected_parameters(self):
#         return [self.lookup_kwarg, self.lookup_kwarg_isnull]
#
#     def choices(self, changelist):
#         yield {
#             'selected': self.lookup_val is None and self.lookup_val_isnull is None,
#             'query_string': changelist.get_query_string({}, [self.lookup_kwarg, self.lookup_kwarg_isnull]),
#             'display': _('All'),
#         }
#         include_none = False
#         for val in self.lookup_choices:
#             if val is None:
#                 include_none = True
#                 continue
#             val = smart_text(val)
#             yield {
#                 'selected': self.lookup_val == val,
#                 'query_string': changelist.get_query_string({
#                     self.lookup_kwarg: val,
#                 }, [self.lookup_kwarg_isnull]),
#                 'display': val,
#             }
#         if include_none:
#             yield {
#                 'selected': bool(self.lookup_val_isnull),
#                 'query_string': changelist.get_query_string({
#                     self.lookup_kwarg_isnull: 'True',
#                 }, [self.lookup_kwarg]),
#                 'display': self.empty_value_display,
#             }
#
# FieldListFilter.register(lambda f: True, MultiselectFieldListFilter)
#
#
#
class ColumnsFieldListFilter(AllValuesFieldListFilter):

    def __init__(self, field, request, params, model, model_admin, field_path):
        super(ColumnsFieldListFilter, self).__init__(
            field, request, params, model, model_admin, field_path)

        self.lookup_choices = ModelFieldHelper.list_display_fields


    def expected_parameters(self):
        return [self.lookup_kwarg, self.lookup_kwarg_isnull]

    def choices(self, changelist):
        yield {
            'selected': self.lookup_val is None and self.lookup_val_isnull is None,
            'query_string': changelist.get_query_string({}, [self.lookup_kwarg, self.lookup_kwarg_isnull]),
            'display': _('All'),
        }
        include_none = False
        for val in self.lookup_choices:
            if val is None:
                include_none = True
                continue
            val = smart_text(val)
            yield {
                'selected': self.lookup_val == val,
                'query_string': changelist.get_query_string({
                    self.lookup_kwarg: val,
                }, [self.lookup_kwarg_isnull]),
                'display': val,
            }
        if include_none:
            yield {
                'selected': bool(self.lookup_val_isnull),
                'query_string': changelist.get_query_string({
                    self.lookup_kwarg_isnull: 'True',
                }, [self.lookup_kwarg]),
                'display': self.empty_value_display,
            }

FieldListFilter.register(lambda f: True, ColumnsFieldListFilter)


# class Dsajdfsajfjfg(AllValuesFieldListFilter):
#     def __init__(self, field, request, params, model, model_admin, field_path):
#         self.lookup_kwarg = field_path
#         self.lookup_kwarg_isnull = '%s__isnull' % field_path
#         self.lookup_val = request.GET.get(self.lookup_kwarg)
#         self.lookup_val_isnull = request.GET.get(self.lookup_kwarg_isnull)
#         self.empty_value_display = model_admin.get_empty_value_display()
#         parent_model, reverse_path = reverse_field_path(model, field_path)
#         # Obey parent ModelAdmin queryset when deciding which options to show
#         if model == parent_model:
#             queryset = model_admin.get_queryset(request)
#         else:
#             queryset = parent_model._default_manager.all()
#         self.lookup_choices = ModelFieldHelper.list_display_fields
#         if self.lookup_val:
#             ModelFieldHelper.list_display_fields = ['name']#[self.lookup_val]
#             self.lookup_choices = ModelFieldHelper.list_display_fields
#         super(AllValuesFieldListFilter, self).__init__(
#             field, request, params, model, model_admin, field_path)
#
#     def expected_parameters(self):
#         return [self.lookup_kwarg, self.lookup_kwarg_isnull]
#
#     def choices(self, changelist):
#         yield {
#             'selected': self.lookup_val is None and self.lookup_val_isnull is None,
#             'query_string': changelist.get_query_string({}, [self.lookup_kwarg, self.lookup_kwarg_isnull]),
#             'display': _('All'),
#         }
#         include_none = False
#         for val in self.lookup_choices:
#             if val is None:
#                 include_none = True
#                 continue
#             val = smart_text(val)
#             yield {
#                 'selected': self.lookup_val == val,
#                 'query_string': changelist.get_query_string({
#                     self.lookup_kwarg: val,
#                 }, [self.lookup_kwarg_isnull]),
#                 'display': val,
#             }
#         if include_none:
#             yield {
#                 'selected': bool(self.lookup_val_isnull),
#                 'query_string': changelist.get_query_string({
#                     self.lookup_kwarg_isnull: 'True',
#                 }, [self.lookup_kwarg]),
#                 'display': self.empty_value_display,
#             }
#
# FieldListFilter.register(lambda f: True, Dsajdfsajfjfg)


class GenEmployeeAdminViewModel(AdminViewModelBase):
    fields = ModelFieldHelper.editable_fields
    readonly_fields = ModelFieldHelper.readonly_fields

    #ModelFieldHelper.list_display = ['id', 'name']
    list_display = ModelFieldHelper.list_display_fields + ['edit']
    list_display_links = ModelFieldHelper.list_display_fields
    list_editable = ()
    list_filter = (('mgr_employee_id__id', AllValuesFieldListFilter), ('email', AllValuesFieldListFilter),
                   ('phone', ChoicesFieldListFilter), ('', ColumnsFieldListFilter), )
    search_fields = [o for o in ModelFieldHelper.indexed_fields if o not in ModelFieldHelper.foreign_fields]

    def get_inlines(self):
        #list_display = ModelFieldHelper.list_display_fields
        return InlineHelper().get_inlines() if self.enable_inlines else []


admin.site.register(Model, GenEmployeeAdminViewModel)
